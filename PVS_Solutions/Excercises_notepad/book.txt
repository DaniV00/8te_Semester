public Optional<AbstractBook> printBookByName(String name) {   //getter class -> Falsche name

Optional<AbstractBook> book = books.values().stream()
							.flatMap(bookCollection -> bookcollection.stream().filter($ -> $.getTitle() == title))
							.findFirst();

}





buffered bytestream -> buffered block geladen und gesendet, während näcstes block im puffer lädt.
Bytestream da es daten unabhängig vom vormat übertragen werden können.



buffered datastream -> NUR primitive daten können übertragen werden, gibt es aber methode die non-primitive daten in pritive daten umwandeln. 


DECORATOR PATTERN

eine abstracte klasse wird mit die gebrauchte methode instanziiert und erweitert um mehrere objekte zu implementieren.
Die methoden in die Abstracte Klasse werden dann referenziert ohne immer denselben methoden in jede klasse zu erstellen.
Objekte dynamisch Verhalten hinzufügen, ohne das Verhalten der Objekt zu ändern
Bei IO streams erlaubt dies ein kaskadieren von konstruktoren um einen Stream verschiedene eigenschaften zu geben.




Dateinamen ausgeben in pfad
					
					
					Files.walk(Path.of(dir))
					.filter(Files::isRegularFile)
					.map(Path.getFileName)
					.forEach(System.out::println);


Pfad ausgeben + hinweis ob pfad ist ordner

					Arrays.stream(paths)
					.map(path -> Path.of(path))
					.map(path -> new Pair(path , Files.isDirectory(path)))
					.forEach(System.out::println)
					
					
					
					
					
					
	XML verarbeitung:
					
					
				DOM vs SAX
				Speicherplatz?
				Geschwindigkeit
				
				
				
				


JSON AUFGABE 3 BLATT 2021

{		
		"project":{
		"xmlns" : "http://....",
		"groupId" : "de.uulm.sp.pvs",
		"build" : {
		"pluginManagement" :
					
					
					






